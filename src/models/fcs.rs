use chrono::NaiveDateTime;

use super::{ChannelMap, FileField, Gate};

pub type ClusterId = usize;

pub type ClusteringDefinitionId = usize;

pub type FileId = usize;

pub enum ClusteringMethod {
    PhenoGraph,
    FlowSOM,
}

pub enum TransformMethod {
    Logicle,
}

pub enum RootPopulation {
    Root,
}

pub enum FileType {
    Complete,
}

/// Defines the methodology and parameters of clustering to apply to an FCS File Group, or in the
/// case of meta-clustering, a collection of FCS File Groups from the same FCS Experiment
pub struct ClusteringDefinition {
    /// Unique identifier
    pub id: ClusteringDefinitionId,
    /// Type of clustering performed
    pub method: ClusteringMethod,
    /// Parameters passed to clustering algorithm (list of tuples)
    pub parameters: Vec<(String, String)>,
    /// List of channels/markers that clustering is performed on
    pub features: Vec<String>,
    /// Type of transformation to be applied to data prior to clustering
    pub transform_method: Option<TransformMethod>, //  (default:"logicle")
    /// Population that clustering is performed on
    pub root_population: RootPopulation,
    /// A prefix to add to the name of each resulting cluster
    pub cluster_prefix: Option<String>, // (default: "cluster")
    /// refers to whether the clustering is 'meta-clustering'
    pub meta_method: String, // (default: False)
    /// clustering_uid for clustering definition that meta-clustering should target in each sample
    pub meta_clustering_uid_target: String,
}

/// Represents a single cluster generated by a clustering experiment on a single file
pub struct Cluster {
    /// Name associated to cluster
    pub id: ClusterId,
    /// Index of cell events associated to cluster (very large array)
    pub index: FileField,
    /// number of events in cluster
    pub n_events: u16,
    /// proportion of events in cluster relative to root population
    pub prop_of_root: f64,
    /// reference to ClusteringDefinition
    pub cluster_experiment: ClusteringDefinitionId,
    /// associated meta-cluster
    pub meta_cluster_id: Option<String>,
}

/// Cached index for population in an associated control
pub struct ClusterIndex {
    /// Name of the control file
    pub control_id: String,
    /// numpy array storing index of events that belong to population
    pub index: FileField,
}

/// Cached populations; stores the index of events associated to a population for quick loading.
pub struct Population {
    /// Name of population
    pub name: String,
    /// Numpy array storing index of events that belong to population
    pub index: FileField,
    /// Proportion of events as a percentage of parent population
    pub prop_of_parent: f64,
    /// Proportion of events as a percentage of all events
    pub prop_of_total: f64,
    /// List of warnings associated to population
    pub warnings: Option<Vec<String>>,
    /// Name of parent population
    pub parent: String,
    /// List of child populations (list of strings)
    pub children: Option<Vec<String>>,
    /// List of key value pairs (tuples; (key, value)) for defining geom of population e.g.
    /// the definition for an ellipse that 'captures' the population
    pub geom: Vec<((), (String, String))>,
    /// List of associated Cluster documents
    pub clusters: Vec<Cluster>,
    /// List of associated Cluster documents
    pub cluster_index: ClusterIndex,
}

pub struct File {
    /// Unique identifier for fcs file
    pub id: FileId,
    /// One of either 'complete' or 'control'; signifies the type of data stored
    pub file_type: FileType,
    /// Numpy array of fcs events data
    pub data: FileField,
    /// Boolean value, if True then data have been compensated
    pub compensated: bool, // (default=False)
    /// List of standarised channel/marker mappings (corresponds to column names of underlying data)
    pub channel_mappings: Vec<ChannelMap>,
}

pub struct FileGroup {
    /// Unique ID to associate to group
    pub primary_id: usize,
    /// List of File objects
    pub files: Vec<File>,
    /// Warnings associated to file group
    pub flags: Option<String>,
    /// Additional free text
    pub notes: Option<String>,
    /// Populations derived from this file group
    pub populations: Vec<Population>,
    /// Gate objects that have been applied to this file group
    pub gates: Vec<Gate>,
    /// Date and time of sample collection
    pub collection_datetime: Option<NaiveDateTime>,
    /// Date and time of sample processing
    pub processing_datetime: Option<NaiveDateTime>,
}
